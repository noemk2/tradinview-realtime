import React, { useEffect, useState } from 'react';
const WebSocket = require('websocket').w3cwebsocket;

function WebSocketComponent() {
  const [messages, setMessages] = useState([]);

  useEffect(() => {
    const connection = new WebSocket('wss://deriv-stream.crypto.com/v1/market');

    connection.onopen = () => {
      const subscribeRequest = {
        id: 1,
        method: 'subscribe',
        params: {
          channels: ['candlestick.4h.BTCUSD-PERP']
        },
        nonce: Date.now()
      };
      connection.send(JSON.stringify(subscribeRequest));
    };

    connection.onmessage = event => {
      const message = event.data;
      const data = JSON.parse(message);

      if (data.method === 'public/heartbeat') {
        const heartbeatResponse = {
          id: data.id,
          method: 'public/respond-heartbeat',
          code: 0
        };
        connection.send(JSON.stringify(heartbeatResponse));
      } else {
        // Actualizar el estado con el nuevo mensaje recibido
        setMessages(prevMessages => [...prevMessages, message]);
      }
    };

    connection.onerror = error => {
      console.log(`Error: ${error}`);
    };

    return () => {
      // Cerrar la conexi√≥n cuando el componente se desmonte
      connection.close();
    };
  }, []);

  return (
    <div>
      <h1>WebSocket Messages:</h1>
      {messages.map((message, index) => (
        <p key={index}>{message}</p>
      ))}
    </div>
  );
}

export default WebSocketComponent;
